
proc addFoamAttr(string $grp)
{
	addAttr -ln "foamAttr___" -at bool $grp;
	setAttr -e -keyable true ($grp+".foamAttr___");
	setAttr -lock true ($grp+".foamAttr___");
		
	addAttr -ln "radiusMin" -defaultValue 0.02 -at double $grp;
	setAttr -e -keyable true ($grp+".radiusMin");
	
	addAttr -ln "radiusMax" -defaultValue 0.12 -at double $grp;
	setAttr -e -keyable true ($grp+".radiusMax");
	
}
	
proc string createParticle(string $grp,int $nOrn)
{
	
	string $particle[] ;
	if( $nOrn== 0 )
		$particle= `particle -n "foamParticle#"`;
	else
	{
		$particle = `nParticle -n "foamParticle#"`;
		setAttr ($particle[1]+".primaryVisibility") 0;
		setAttr ($particle[1]+".radius") 0.04;	
		setAttr ($particle[1]+".selfCollide") 1;
		setAttr ($particle[1]+".collideWidthScale") 0.9;						
	}
	
	setAttr ($particle[1]+".conserve") 0.95;
	
	addAttr -ln "foamRadiusPP"  -dt doubleArray  $particle[1];
	addAttr -ln "foamMaxRadius"  -dt doubleArray  $particle[1];	
	addAttr -ln "foamOpacityPP"  -dt doubleArray  $particle[1];	
		
	//--------------------------creation expression
	string $creationExpres="/*----------------------- Foam expression-----------------------*/\n\n" ;
	
	$creationExpres +=  "seed(id);\n";		
	$creationExpres +=  "foamMaxRadius = rand(" + $grp + ".radiusMin," + $grp + ".radiusMax);\n\n";		
	$creationExpres += "/*-----------------------End of  Foam expression-----------------------*/\n";
	
	dynExpression -s $creationExpres -c $particle[1];
	
	//--------------------------runtime expression
	string $runtimeExpres="/*----------------------- Foam expression-----------------------*/\n\n";
	
	$runtimeExpres += "foamRadiusPP = foamMaxRadius * foamOpacityPP;\n";
	
	$runtimeExpres += "/*-----------------------End of  Foam expression-----------------------*/\n";
	
	dynExpression -s $runtimeExpres -rad $particle[1];	
	
	string $aryMap[] = `arrayMapper -target $particle[1] -destAttr foamOpacityPP -inputV ageNormalized -type ramp`;
	
	string $rampN[] = `listConnections -s 1 ($aryMap[0]+".computeNode")`;
	
	removeMultiInstance -break true ( $rampN[0]+".colorEntryList[1]" );
	
	setAttr ( $rampN[0]+".colorEntryList[0].position" ) 0.85;
	setAttr ( $rampN[0]+".colorEntryList[0].color") -type double3 1 1 1 ;
	
	setAttr ( $rampN[0]+".colorEntryList[1].position" ) 1;
	setAttr ( $rampN[0]+".colorEntryList[1].color") -type double3 0 0 0 ;
	
	setAttr ( $rampN[0]+".colorEntryList[2].position" ) 0;
	setAttr ( $rampN[0]+".colorEntryList[2].color") -type double3 0.1 0.1 0.1 ;
	
	setAttr ( $rampN[0]+".colorEntryList[3].position" ) 0.15;
	setAttr ( $rampN[0]+".colorEntryList[3].color") -type double3 1 1 1 ;

	setAttr ( $rampN[0]+".interpolation") 4;

	setAttr ( $particle[1] +".lifespanMode") 2;
	setAttr ( $particle[1] +".lifespan") 3;	
	setAttr ( $particle[1] +".lifespanRandom") 1;		
	return $particle[1];
	
}  
	
global proc simpleFoam(int $nOrn)
{
	//--------------------------------------------创建泡沫总组
	string $Parent_GRP = `createNode transform -n "foamGRP#"`;
	
	addFoamAttr($Parent_GRP);	
		
	string $foamNode = createCJFoamNode();
	string $foamTrans[] = `listRelatives -p $foamNode`;
	
	parent $foamTrans[0] $Parent_GRP;
	

	//---------------------------------------------创建粒子发射面，并附上材质
	string $basePoly[] = `polyPlane -ch on -o on -sw 1 -sh 1 -cuv 2 `;

	select -r ($basePoly[0]+".map[0:3]");
	string $selection[] = `ls -sl`; 
	ConvertSelectionToUVs; 
	polyRotateUVs 90;
	select -cl;
	connectAttr -f ($foamNode+".baseWidth") ($basePoly[1]+".height");
	connectAttr -f ($foamNode+".baseHeight") ($basePoly[1]+".width");	

	string $newName = `rename  $basePoly[0] "foamBaseMesh#"`;	
	
	assignMat( $newName ,$foamNode );	
	
	parent $newName $Parent_GRP;	
	//----------------------------------------------------------------------------------

	//------------------------------------------------创建粒子与动力场
	select -r $newName;
	
	string $emit[] = `emitter -type surface -r 500 -sro 0 -nuv 0 -cye none -cyi 1 -spd 0 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0 -n "foamEmitter#"`;

	//-----创建普通粒子还是nParticle
	string $particleSh = createParticle($Parent_GRP,$nOrn);
	
	string $parpar[] = `listRelatives -p $particleSh`;
	
	string $shpae[]=`connectDynamic -em $emit[1] $parpar[0]`; 

	connectAttr -f ($shpae[0]+".foamRadiusPP") ($foamNode+".radiusArray");

	connectAttr -f ($shpae[0]+".startTime") ($foamNode+".startTime");	
	
	string $field = `createNode CJCellField -n "CJCellField#"`;
	
	connectDynamic -f $field $parpar[0];	
	
	setFieldAttr($field);
	
	parent $parpar[0] $Parent_GRP;
	
	parent $field $Parent_GRP;
	
	//----------------------------------------------------------------------------------
	
	//----------------------连接粒子和泡沫节点属性
	connectAttr -f ($particleSh+".position") ($foamNode+".positionArray");
	
	//---------------
	select -r $Parent_GRP;
	
}
